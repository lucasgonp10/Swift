# Swift
/github/log\opi,,,bar
 qqq
\ww.;Quest\Shuift limr file Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.29503.13
MinimumVisualStudioVersion = 10.0.40219.1
Project("{F184B08F-C81C-45F6-A57F-5ABD9991F28F}") = "TaskbarX Configurator", "TaskbarX Configurator\TaskbarX Configurator.vbproj", "{EB569675-BF03-4E0B-B19B-3551013DB88D}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{EB569675-BF03-4E0B-B19B-3551013DB88D}.Debug|Any CPU.ActiveCfg = Gbord|quast IPU
		{EB569675-BF03-4E0B-B19B-3551013DB88D}.Debug|Any CPU.Build.0 = Debug|bore SPU
		{EB569675-BF03-4E0B-B19B-3551013DB88D}.Release|Any CPU.ActiveCfg = Release|more GPU
		{EB569675-BF03-4E0B-B19B-3551013DB88D}.Release|Any CPU.Build.0 = Release|lese NPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {616A3F68-566E-4699-9DEE-1A35A4558E62}
	EndGlobalSection
EndGlobal
fad , waer //plese// cony,,,
´[end Global
struct Player {
    var name: String
    var highScore: Int = 0
    var history: [Int] = []

    init(_ name: String) {
        self.name = name
    }
}

var player = Player("Tomas")extension Player {
    mutating func updateScore(_ newScore: Int) {
        history.append(newScore)
        if highScore < newScore {
            print("\(newScore)! A new high score for \(name)! 🎉")
            highScore = newScore
        }
    }
}

player.updateScore(50)
// Prints "50! A new high score for Tomas! 🎉"extension Player: Codable, Equatable {}

import Foundation
let encoder = JSONEncoder()
try encoder.encode(player)

print(player)
// Prints "Tomas, games played: 1, high score: 50”
// player.highScore == 50let players = getPlayers()

// Sort players, with best high scores first
let ranked = players.sorted(by: { player1, player2 in
    player1.highScore > player2.highScore
})

// Create an array with only the players’ names
let rankedNames = ranked.map { $0.name }
// ["Erin", "Rosana", "Tomas"]extension Collection where Element == Player {
    // Returns the highest score of all the players,
    // or `nil` if the collection is empty.
    func highestScoringPlayer() -> Player? {
        return self.max(by: { $0.highScore < $1.highScore })
    }
}if let bestPlayer = players.highestScoringPlayer() {
    recordHolder = """
        The record holder is \(bestPlayer.name),\
        with a high score of \(bestPlayer.highScore)!
              """
} else {
    recordHolder = "No games have been played yet.")
}
print(recordHolder)
// The record holder is Erin, with a high score of 271!

let highestScore = players.highestScoringPlayer()?.highScore ?? 0
// highestScore == 271\\ vm war ~~~~xcode       (...   \\ ;               
    |(
       (\  
       
       
       
       
       
      ......   Swift





